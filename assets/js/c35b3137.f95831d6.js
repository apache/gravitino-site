"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[72070],{20527:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>r});var t=n(79474);const l={},i=t.createContext(l);function s(e){const a=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:a},e.children)}},28887:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var t=n(13274),l=n(20527),i=n(54385),s=n(77167);const r={title:"Manage relational metadata using Apache Gravitino",slug:"/manage-relational-metadata-using-gravitino",date:new Date("2023-12-10T00:00:00.000Z"),keyword:"Gravitino relational metadata manage",license:"This software is licensed under the Apache License version 2."},c=void 0,o={id:"manage-relational-metadata-using-gravitino",title:"Manage relational metadata using Apache Gravitino",description:"This page introduces how to manage relational metadata by Apache Gravitino, relational metadata refers",source:"@site/versioned_docs/version-0.7.0-incubating/manage-relational-metadata-using-gravitino.md",sourceDirName:".",slug:"/manage-relational-metadata-using-gravitino",permalink:"/docs/0.7.0-incubating/manage-relational-metadata-using-gravitino",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/gravitino-site/tree/main/docs/manage-relational-metadata-using-gravitino.md",tags:[],version:"0.7.0-incubating",frontMatter:{title:"Manage relational metadata using Apache Gravitino",slug:"/manage-relational-metadata-using-gravitino",date:"2023-12-10T00:00:00.000Z",keyword:"Gravitino relational metadata manage",license:"This software is licensed under the Apache License version 2."},sidebar:"docs",previous:{title:"Manage metalake",permalink:"/docs/0.7.0-incubating/manage-metalake-using-gravitino"},next:{title:"Manage table partition",permalink:"/docs/0.7.0-incubating/manage-table-partition-using-gravitino"}},d={},h=[{value:"Catalog operations",id:"catalog-operations",level:2},{value:"Create a catalog",id:"create-a-catalog",level:3},{value:"Load a catalog",id:"load-a-catalog",level:3},{value:"Alter a catalog",id:"alter-a-catalog",level:3},{value:"Enable a catalog",id:"enable-a-catalog",level:3},{value:"Disable a catalog",id:"disable-a-catalog",level:3},{value:"Drop a catalog",id:"drop-a-catalog",level:3},{value:"List all catalogs in a metalake",id:"list-all-catalogs-in-a-metalake",level:3},{value:"List all catalogs&#39; information in a metalake",id:"list-all-catalogs-information-in-a-metalake",level:3},{value:"Schema operations",id:"schema-operations",level:2},{value:"Create a schema",id:"create-a-schema",level:3},{value:"Load a schema",id:"load-a-schema",level:3},{value:"Alter a schema",id:"alter-a-schema",level:3},{value:"Drop a schema",id:"drop-a-schema",level:3},{value:"List all schemas under a catalog",id:"list-all-schemas-under-a-catalog",level:3},{value:"Table operations",id:"table-operations",level:2},{value:"Create a table",id:"create-a-table",level:3},{value:"Apache Gravitino table column type",id:"apache-gravitino-table-column-type",level:4},{value:"External type",id:"external-type",level:5},{value:"Unparsed type",id:"unparsed-type",level:5},{value:"Table column default value",id:"table-column-default-value",level:4},{value:"Table column auto-increment",id:"table-column-auto-increment",level:4},{value:"Table property and type mapping",id:"table-property-and-type-mapping",level:4},{value:"Table partitioning, distribution, sort ordering and indexes",id:"table-partitioning-distribution-sort-ordering-and-indexes",level:4},{value:"Load a table",id:"load-a-table",level:3},{value:"Alter a table",id:"alter-a-table",level:3},{value:"Drop a table",id:"drop-a-table",level:3},{value:"List all tables under a schema",id:"list-all-tables-under-a-schema",level:3}];function p(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.p,{children:"This page introduces how to manage relational metadata by Apache Gravitino, relational metadata refers\nto relational catalog, schema, table and partitions. Through Gravitino, you can create, edit, and\ndelete relational metadata via unified REST APIs or Java client."}),"\n",(0,t.jsx)(a.p,{children:"In this document, Gravitino uses Apache Hive catalog as an example to show how to manage\nrelational metadata by Gravitino. Other relational catalogs are similar to Hive catalog,\nbut they may have some differences, especially in catalog property, table property, and column type.\nFor more details, please refer to the related doc."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/apache-hive-catalog",children:(0,t.jsx)(a.strong,{children:"Apache Hive"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog",children:(0,t.jsx)(a.strong,{children:"MySQL"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-postgresql-catalog",children:(0,t.jsx)(a.strong,{children:"PostgreSQL"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-doris-catalog",children:(0,t.jsx)(a.strong,{children:"Apache Doris"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog",children:(0,t.jsx)(a.strong,{children:"OceanBase"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-iceberg-catalog",children:(0,t.jsx)(a.strong,{children:"Apache Iceberg"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-paimon-catalog",children:(0,t.jsx)(a.strong,{children:"Apache Paimon"})})}),"\n",(0,t.jsx)(a.li,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-hudi-catalog",children:(0,t.jsx)(a.strong,{children:"Apache Hudi"})})}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Assuming:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["Gravitino has just started, and the host and port is ",(0,t.jsx)(a.a,{href:"http://localhost:8090",children:"http://localhost:8090"}),"."]}),"\n",(0,t.jsxs)(a.li,{children:["A metalake has been created and ",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/manage-metalake-using-gravitino#enable-a-metalake",children:"enabled"}),"."]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"catalog-operations",children:"Catalog operations"}),"\n",(0,t.jsx)(a.h3,{id:"create-a-catalog",children:"Create a catalog"}),"\n",(0,t.jsxs)(a.admonition,{type:"tip",children:[(0,t.jsx)(a.p,{children:"The code below is an example of creating a Hive catalog. For other relational catalogs, the code is\nsimilar, but the catalog type, provider, and properties may be different. For more details, please refer to the related doc."}),(0,t.jsxs)(a.p,{children:["For relational catalog, you must specify the catalog ",(0,t.jsx)(a.code,{children:"type"})," as ",(0,t.jsx)(a.code,{children:"RELATIONAL"})," when creating a catalog."]})]}),"\n",(0,t.jsxs)(a.p,{children:["You can create a catalog by sending a ",(0,t.jsx)(a.code,{children:"POST"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs"})," endpoint or just use the Gravitino Java client. The following is an example of creating a catalog:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "catalog",\n  "type": "RELATIONAL",\n  "comment": "comment",\n  "provider": "hive",\n  "properties": {\n    "metastore.uris": "thrift://localhost:9083"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'\n// Assuming you have just created a metalake named `metalake`\nGravitinoClient gravitinoClient = GravitinoClient\n    .builder("http://127.0.0.1:8090")\n    .withMetalake("metalake")\n    .build();\n\nMap<String, String> hiveProperties = ImmutableMap.<String, String>builder()\n        // You should replace the following with your own hive metastore uris that Gravitino can access\n        .put("metastore.uris", "thrift://localhost:9083")\n        .build();\n\nCatalog catalog = gravitinoClient.createCatalog("catalog",\n    Type.RELATIONAL,\n    "hive", // provider, We support hive, jdbc-mysql, jdbc-postgresql, lakehouse-iceberg, lakehouse-paimon etc.\n    "This is a hive catalog",\n    hiveProperties); // Please change the properties according to the value of the provider.\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# Assuming you have just created a metalake named `metalake`\ngravitino_client = GravitinoClient(uri="http://localhost:8090", metalake_name="metalake")\ngravitino_client.create_catalog(name="catalog",\n                                catalog_type=CatalogType.RELATIONAL,\n                                provider="hive",\n                                comment="This is a hive catalog",\n                                properties={"metastore.uris": "thrift://localhost:9083"})\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Currently, Gravitino supports the following catalog providers:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Catalog provider"}),(0,t.jsx)(a.th,{children:"Catalog property"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"hive"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/apache-hive-catalog#catalog-properties",children:"Hive catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-iceberg-catalog#catalog-properties",children:"Iceberg catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-paimon"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-paimon-catalog#catalog-properties",children:"Paimon catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-hudi"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-hudi-catalog#catalog-properties",children:"Hudi catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-mysql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog#catalog-properties",children:"MySQL catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-postgresql-catalog#catalog-properties",children:"PostgreSQL catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-doris"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-doris-catalog#catalog-properties",children:"Doris catalog property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-oceanbase"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog#catalog-properties",children:"OceanBase catalog property"})})]})]})]}),"\n",(0,t.jsx)(a.h3,{id:"load-a-catalog",children:"Load a catalog"}),"\n",(0,t.jsxs)(a.p,{children:["You can load a catalog by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a catalog:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" http://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have created a metalake named `metalake` and a catalog named `catalog`\nCatalog catalog = gravitinoClient.loadCatalog("catalog");\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ncatalog = gravitino_client.load_catalog("catalog")\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"alter-a-catalog",children:"Alter a catalog"}),"\n",(0,t.jsxs)(a.p,{children:["You can modify a catalog by sending a ",(0,t.jsx)(a.code,{children:"PUT"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of altering a catalog:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "rename",\n      "newName": "alter_catalog"\n    },\n    {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have created a metalake named `metalake` and a catalog named `catalog`\nCatalog catalog = gravitinoClient.alterCatalog("catalog",\n    CatalogChange.rename("alter_catalog"), CatalogChange.updateComment("new comment"));\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\nchanges = (CatalogChange.update_comment("new comment"))\ncatalog = gravitino_client.alterCatalog("catalog", *changes)\n# ...\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a catalog:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Supported modification"}),(0,t.jsx)(a.th,{children:"JSON"}),(0,t.jsx)(a.th,{children:"Java"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Rename catalog"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"rename","newName":"catalog_renamed"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'CatalogChange.rename("catalog_renamed")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update comment"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'CatalogChange.updateComment("new_comment")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Set a property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'CatalogChange.setProperty("key1", "value1")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Remove a property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'CatalogChange.removeProperty("key1")'})})]})]})]}),"\n",(0,t.jsxs)(a.admonition,{type:"warning",children:[(0,t.jsx)(a.p,{children:"Most catalog-altering operations are generally safe. However, if you want to change the catalog's URI, you should proceed with caution. Changing the URI may point to a different cluster, rendering the metadata stored in Gravitino unusable.\nFor instance, if the old URI and the new URI point to different clusters that both have a database named db1, changing the URI might cause the old metadata, such as audit information, to be used when accessing db1, which is undesirable."}),(0,t.jsx)(a.p,{children:"Therefore, do not change the catalog's URI unless you fully understand the consequences of such a modification."})]}),"\n",(0,t.jsx)(a.h3,{id:"enable-a-catalog",children:"Enable a catalog"}),"\n",(0,t.jsxs)(a.p,{children:["Catalog has a reserved property - ",(0,t.jsx)(a.code,{children:"in-use"}),", which indicates whether the catalog is available for use. By default, the ",(0,t.jsx)(a.code,{children:"in-use"})," property is set to ",(0,t.jsx)(a.code,{children:"true"}),".\nTo enable a disabled catalog, you can send a ",(0,t.jsx)(a.code,{children:"PATCH"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or use the Gravitino Java client."]}),"\n",(0,t.jsx)(a.p,{children:"The following is an example of enabling a catalog:"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X PATCH -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{"inUse": true}\' \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ngravitinoClient.enableCatalog("catalog");\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ngravitino_client.enable_catalog("catalog")\n# ...\n'})})})]}),"\n",(0,t.jsx)(a.admonition,{type:"info",children:(0,t.jsx)(a.p,{children:"This operation does nothing if the catalog is already enabled."})}),"\n",(0,t.jsx)(a.h3,{id:"disable-a-catalog",children:"Disable a catalog"}),"\n",(0,t.jsx)(a.p,{children:"Once a catalog is disabled:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["Users can only ",(0,t.jsx)(a.a,{href:"#list-all-catalogs-in-a-metalake",children:"list"}),", ",(0,t.jsx)(a.a,{href:"#load-a-catalog",children:"load"}),", ",(0,t.jsx)(a.a,{href:"#drop-a-catalog",children:"drop"}),", or ",(0,t.jsx)(a.a,{href:"#enable-a-catalog",children:"enable"})," it."]}),"\n",(0,t.jsx)(a.li,{children:"Any other operation on the catalog or its sub-entities will result in an error."}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["To disable a catalog, you can send a ",(0,t.jsx)(a.code,{children:"PATCH"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or use the Gravitino Java client."]}),"\n",(0,t.jsx)(a.p,{children:"The following is an example of disabling a catalog:"}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X PATCH -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{"inUse": false}\' \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ngravitinoClient.disableCatalog("catalog");\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ngravitino_client.disable_catalog("catalog")\n# ...\n'})})})]}),"\n",(0,t.jsx)(a.admonition,{type:"info",children:(0,t.jsx)(a.p,{children:"This operation does nothing if the catalog is already disabled."})}),"\n",(0,t.jsx)(a.h3,{id:"drop-a-catalog",children:"Drop a catalog"}),"\n",(0,t.jsx)(a.p,{children:'Deleting a catalog by "force" is not a default behavior, so please make sure:'}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"There are no schemas under the catalog. Otherwise, you will get an error."}),"\n",(0,t.jsxs)(a.li,{children:["The catalog is ",(0,t.jsx)(a.a,{href:"#disable-a-catalog",children:"disabled"}),". Otherwise, you will get an error."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:'Deleting a catalog by "force" will:'}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Delete all sub-entities (schemas, tables, etc.) under the catalog."}),"\n",(0,t.jsx)(a.li,{children:"Delete the catalog itself even if it is enabled."}),"\n",(0,t.jsx)(a.li,{children:"Not delete the external resources (such as database, table, etc.) associated with sub-entities unless they are managed (such as managed fileset)."}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["You can remove a catalog by sending a ",(0,t.jsx)(a.code,{children:"DELETE"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a catalog:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog?force=false\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have created a metalake named `metalake` and a catalog named `catalog`\n// force can be true or false\ngravitinoClient.dropCatalog("catalog", false);\n// ...\n\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\n# force can be true or false\ngravitino_client.drop_catalog(name="catalog", force=False)\n# ...\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"list-all-catalogs-in-a-metalake",children:"List all catalogs in a metalake"}),"\n",(0,t.jsxs)(a.p,{children:["You can list all catalogs under a metalake by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs"})," endpoint or just use the Gravitino Java client. The following is an example of listing all the catalogs in\na metalake:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// ...\n// Assuming you have just created a metalake named `metalake`\nString[] catalogNames = gravitinoClient.listCatalogs();\n// ...\n"})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ncatalog_names = gravitino_client.list_catalogs()\n# ...\n"})})})]}),"\n",(0,t.jsx)(a.h3,{id:"list-all-catalogs-information-in-a-metalake",children:"List all catalogs' information in a metalake"}),"\n",(0,t.jsxs)(a.p,{children:["You can list all catalogs' information under a metalake by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs?details=true"})," endpoint or just use the Gravitino Java client. The following is an example of listing all the catalogs' information in a metalake:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs?details=true\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// ...\n// Assuming you have just created a metalake named `metalake`\nCatalog[] catalogsInfos = gravitinoMetaLake.listCatalogsInfo();\n// ...\n"})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"# ...\n# Assuming you have created a metalake named `metalake` and a catalog named `catalog`\ncatalogs_info = gravitino_client.list_catalogs_info()\n# ...\n"})})})]}),"\n",(0,t.jsx)(a.h2,{id:"schema-operations",children:"Schema operations"}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"Users should create a metalake and a catalog, then ensure that the metalake and catalog are enabled before operating schemas."})}),"\n",(0,t.jsx)(a.h3,{id:"create-a-schema",children:"Create a schema"}),"\n",(0,t.jsxs)(a.p,{children:["You can create a schema by sending a ",(0,t.jsx)(a.code,{children:"POST"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas"})," endpoint or just use the Gravitino Java client. The following is an example of creating a schema:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "schema",\n  "comment": "comment",\n  "properties": {\n    "key1": "value1"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n\nMap<String, String> schemaProperties = ImmutableMap.<String, String>builder()\n    .build();\nSchema schema = supportsSchemas.createSchema("schema",\n    "This is a schema",\n    schemaProperties\n);\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'gravitino_client: GravitinoClient = GravitinoClient(uri="http://127.0.0.1:8090", metalake_name="metalake")\ncatalog: Catalog = gravitino_client.load_catalog(name="hive_catalog")\ncatalog.as_schemas().create_schema(name="schema",\n                                   comment="This is a schema",\n                                   properties={})\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Currently, Gravitino supports the following schema property:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Catalog provider"}),(0,t.jsx)(a.th,{children:"Schema property"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"hive"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/apache-hive-catalog#schema-properties",children:"Hive schema property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-iceberg-catalog#schema-properties",children:"Iceberg scheme property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-paimon"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-paimon-catalog#schema-properties",children:"Paimon scheme property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-hudi"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-hudi-catalog#schema-properties",children:"Hudi scheme property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-mysql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog#schema-properties",children:"MySQL schema property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-postgresql-catalog#schema-properties",children:"PostgreSQL schema property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-doris"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-doris-catalog#schema-properties",children:"Doris schema property"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-oceanbase"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog#schema-properties",children:"OceanBase schema property"})})]})]})]}),"\n",(0,t.jsx)(a.h3,{id:"load-a-schema",children:"Load a schema"}),"\n",(0,t.jsxs)(a.p,{children:["You can create a schema by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a schema:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET \\-H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\nSupportsSchemas supportsSchemas = catalog.asSchemas();\nSchema schema = supportsSchemas.loadSchema("schema");\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'gravitino_client: GravitinoClient = GravitinoClient(uri="http://127.0.0.1:8090", metalake_name="metalake")\ncatalog: Catalog = gravitino_client.load_catalog(name="hive_catalog")\nschema: Schema = catalog.as_schemas().load_schema(name="schema")\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"alter-a-schema",children:"Alter a schema"}),"\n",(0,t.jsxs)(a.p,{children:["You can change a schema by sending a ",(0,t.jsx)(a.code,{children:"PUT"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of modifying a schema:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "removeProperty",\n      "property": "key2"\n    }, {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n\nSchema schema = supportsSchemas.alterSchema("schema",\n    SchemaChange.removeProperty("key1"),\n    SchemaChange.setProperty("key2", "value2"));\n// ...\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'gravitino_client: GravitinoClient = GravitinoClient(uri="http://127.0.0.1:8090", metalake_name="metalake")\ncatalog: Catalog = gravitino_client.load_catalog(name="hive_catalog")\n\nchanges = (\n    SchemaChange.remove_property("schema_properties_key1"),\n    SchemaChange.set_property("schema_properties_key2", "schema_properties_new_value"),\n)\nschema_new: Schema = catalog.as_schemas().alter_schema("schema", \n                                                       *changes)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a schema:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Supported modification"}),(0,t.jsx)(a.th,{children:"JSON"}),(0,t.jsx)(a.th,{children:"Java"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Set a property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'SchemaChange.setProperty("key1", "value1")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Remove a property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'SchemaChange.removeProperty("key1")'})})]})]})]}),"\n",(0,t.jsx)(a.h3,{id:"drop-a-schema",children:"Drop a schema"}),"\n",(0,t.jsxs)(a.p,{children:["You can remove a schema by sending a ",(0,t.jsx)(a.code,{children:"DELETE"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a schema:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'// cascade can be true or false\ncurl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema?cascade=true\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n// cascade can be true or false\nsupportsSchemas.dropSchema("schema", true);\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'gravitino_client: GravitinoClient = GravitinoClient(uri="http://127.0.0.1:8090", metalake_name="metalake")\ncatalog: Catalog = gravitino_client.load_catalog(name="hive_catalog")\n\ncatalog.as_schemas().drop_schema("schema", cascade=True)\n'})})})]}),"\n",(0,t.jsxs)(a.p,{children:["If ",(0,t.jsx)(a.code,{children:"cascade"})," is true, Gravitino will drop all tables under the schema. Otherwise, Gravitino will throw an exception if there are tables under the schema.\nSome catalogs may not support cascading deletion of a schema, please refer to the related doc for more details."]}),"\n",(0,t.jsx)(a.h3,{id:"list-all-schemas-under-a-catalog",children:"List all schemas under a catalog"}),"\n",(0,t.jsxs)(a.p,{children:["You can list all schemas under a catalog by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas"})," endpoint or just use the Gravitino Java client. The following is an example of listing all the schemas\nin a catalog:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\nString[] schemas = supportsSchemas.listSchemas();\n'})})}),(0,t.jsx)(s.default,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'gravitino_client: GravitinoClient = GravitinoClient(uri="http://127.0.0.1:8090", metalake_name="metalake")\ncatalog: Catalog = gravitino_client.load_catalog(name="hive_catalog")\n\nschema_list: List[NameIdentifier] = catalog.as_schemas().list_schemas()\n'})})})]}),"\n",(0,t.jsx)(a.h2,{id:"table-operations",children:"Table operations"}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"Users should create a metalake, a catalog and a schema, then ensure that the metalake and catalog are enabled before before operating tables."})}),"\n",(0,t.jsx)(a.h3,{id:"create-a-table",children:"Create a table"}),"\n",(0,t.jsxs)(a.p,{children:["You can create a table by sending a ",(0,t.jsx)(a.code,{children:"POST"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables"})," endpoint or just use the Gravitino Java client. The following is an example of creating a table:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "example_table",\n  "comment": "This is an example table",\n  "columns": [\n    {\n      "name": "id",\n      "type": "integer",\n      "comment": "id column comment",\n      "nullable": false,\n      "autoIncrement": true,\n      "defaultValue": {\n        "type": "literal",\n        "dataType": "integer",\n        "value": "-1"\n      }\n    },\n    {\n      "name": "name",\n      "type": "varchar(500)",\n      "comment": "name column comment",\n      "nullable": true,\n      "autoIncrement": false,\n      "defaultValue": {\n        "type": "literal",\n        "dataType": "null",\n        "value": "null"\n      }\n    },\n    {\n      "name": "StartingDate",\n      "type": "timestamp",\n      "comment": "StartingDate column comment",\n      "nullable": false,\n      "autoIncrement": false,\n      "defaultValue": {\n        "type": "function",\n        "funcName": "current_timestamp",\n        "funcArgs": []\n      }\n    },\n    {\n      "name": "info",\n      "type": {\n        "type": "struct",\n        "fields": [\n          {\n            "name": "position",\n            "type": "string",\n            "nullable": true,\n            "comment": "position field comment"\n          },\n          {\n            "name": "contact",\n            "type": {\n              "type": "list",\n              "elementType": "integer",\n              "containsNull": false\n            },\n            "nullable": true,\n            "comment": "contact field comment"\n          },\n          {\n            "name": "rating",\n            "type": {\n              "type": "map",\n              "keyType": "string",\n              "valueType": "integer",\n              "valueContainsNull": false\n            },\n            "nullable": true,\n            "comment": "rating field comment"\n          }\n        ]\n      },\n      "comment": "info column comment",\n      "nullable": true\n    },\n    {\n      "name": "dt",\n      "type": "date",\n      "comment": "dt column comment",\n      "nullable": true\n    }\n  ],\n  "partitioning": [\n    {\n      "strategy": "identity",\n      "fieldName": [ "dt" ]\n    }\n  ],\n  "distribution": {\n    "strategy": "hash",\n    "number": 32,\n    "funcArgs": [\n      {\n        "type": "field",\n        "fieldName": [ "id" ]\n      }\n    ]\n  },\n  "sortOrders": [\n    {\n      "sortTerm": {\n        "type": "field",\n        "fieldName": [ "age" ]\n      },\n      "direction": "asc",\n      "nullOrdering": "nulls_first"\n    }\n  ],\n  "indexes": [\n    {\n      "indexType": "primary_key",\n      "name": "PRIMARY",\n      "fieldNames": [["id"]]\n    }\n  ],\n  "properties": {\n    "format": "ORC"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\n\n// This is an example of creating a Hive table, you should refer to the related doc to get the\n// table properties of other catalogs.\nMap<String, String> tablePropertiesMap = ImmutableMap.<String, String>builder()\n        .put("format", "ORC")\n        // For more table properties, please refer to the related doc.\n        .build();\n\ntableCatalog.createTable(\n  NameIdentifier.of("schema", "example_table"),\n  new Column[] {\n    Column.of("id", Types.IntegerType.get(), "id column comment", false, true, Literals.integerLiteral(-1)),\n    Column.of("name", Types.VarCharType.of(500), "name column comment", true, false, Literals.NULL),\n    Column.of("StartingDate", Types.TimestampType.withoutTimeZone(), "StartingDate column comment", false, false, Column.DEFAULT_VALUE_OF_CURRENT_TIMESTAMP),\n    Column.of("info", Types.StructType.of(\n        Field.nullableField("position", Types.StringType.get(), "Position of the user"),\n        Field.nullableField("contact", Types.ListType.of(Types.IntegerType.get(), false), "contact field comment"),\n        Field.nullableField("rating", Types.MapType.of(Types.VarCharType.of(1000), Types.IntegerType.get(), false), "rating field comment")\n      ), "info column comment", true, false, null),\n    Column.of("dt", Types.DateType.get(), "dt column comment", true, false, null)\n  },\n  "This is an example table",\n  tablePropertiesMap,\n  new Transform[] {Transforms.identity("id")},\n  Distributions.of(Strategy.HASH, 32, NamedReference.field("id")),\n  new SortOrder[] {SortOrders.ascending(NamedReference.field("name"))},\n  new Index[] {Indexes.of(IndexType.PRIMARY_KEY, "PRIMARY", new String[][]{{"id"}})}\n);\n'})})})]}),"\n",(0,t.jsx)(a.admonition,{type:"caution",children:(0,t.jsx)(a.p,{children:"The provided example demonstrates table creation but isn't directly executable in Gravitino, since not all catalogs fully support these capabilities."})}),"\n",(0,t.jsx)(a.p,{children:"In order to create a table, you need to provide the following information:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Table column name and type"}),"\n",(0,t.jsx)(a.li,{children:"Table column default value (optional)"}),"\n",(0,t.jsx)(a.li,{children:"Table column auto-increment (optional)"}),"\n",(0,t.jsx)(a.li,{children:"Table property (optional)"}),"\n"]}),"\n",(0,t.jsx)(a.h4,{id:"apache-gravitino-table-column-type",children:"Apache Gravitino table column type"}),"\n",(0,t.jsx)(a.p,{children:"The following types that Gravitino supports:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Type"}),(0,t.jsx)(a.th,{children:"Java"}),(0,t.jsx)(a.th,{children:"JSON"}),(0,t.jsx)(a.th,{children:"Description"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Boolean"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.BooleanType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"boolean"})}),(0,t.jsx)(a.td,{children:"Boolean type"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Byte"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.ByteType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"byte"})}),(0,t.jsx)(a.td,{children:"Byte type, indicates a numerical value of 1 byte"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Unsigned Byte"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.ByteType.unsigned()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"byte unsigned"})}),(0,t.jsx)(a.td,{children:"Unsigned Byte type, indicates a unsigned numerical value of 1 byte"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Short"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.ShortType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"short"})}),(0,t.jsx)(a.td,{children:"Short type, indicates a numerical value of 2 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Unsigned Short"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.ShortType.unsigned()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"short unsigned"})}),(0,t.jsx)(a.td,{children:"Unsigned Short type, indicates a unsigned numerical value of 2 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Integer"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.IntegerType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"integer"})}),(0,t.jsx)(a.td,{children:"Integer type, indicates a numerical value of 4 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Unsigned Integer"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.IntegerType.unsigned()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"integer unsigned"})}),(0,t.jsx)(a.td,{children:"Unsigned Integer type, indicates a unsigned numerical value of 4 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Long"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.LongType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"long"})}),(0,t.jsx)(a.td,{children:"Long type, indicates a numerical value of 8 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Unsigned Long"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.LongType.unsigned()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"long unsigned"})}),(0,t.jsx)(a.td,{children:"Unsigned Long type, indicates a unsigned numerical value of 8 bytes"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Float"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.FloatType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"float"})}),(0,t.jsx)(a.td,{children:"Float type, indicates a single-precision floating point number"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Double"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.DoubleType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"double"})}),(0,t.jsx)(a.td,{children:"Double type, indicates a double-precision floating point number"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Decimal(precision, scale)"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.DecimalType.of(precision, scale)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"decimal(p, s)"})}),(0,t.jsxs)(a.td,{children:["Decimal type, indicates a fixed-precision decimal number with the constraint that the precision must be in range ",(0,t.jsx)(a.code,{children:"[1, 38]"})," and the scala must be in range ",(0,t.jsx)(a.code,{children:"[0, precision]"})]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"String"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.StringType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"string"})}),(0,t.jsx)(a.td,{children:"String type"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"FixedChar(length)"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.FixedCharType.of(length)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"char(l)"})}),(0,t.jsx)(a.td,{children:"Char type, indicates a fixed-length string"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"VarChar(length)"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.VarCharType.of(length)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"varchar(l)"})}),(0,t.jsx)(a.td,{children:"Varchar type, indicates a variable-length string, the length is the maximum length of the string"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Timestamp"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.TimestampType.withoutTimeZone()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"timestamp"})}),(0,t.jsx)(a.td,{children:"Timestamp type, indicates a timestamp without timezone"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"TimestampWithTimezone"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.TimestampType.withTimeZone()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"timestamp_tz"})}),(0,t.jsx)(a.td,{children:"Timestamp with timezone type, indicates a timestamp with timezone"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Date"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.DateType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"date"})}),(0,t.jsx)(a.td,{children:"Date type"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Time"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.TimeType.withoutTimeZone()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"time"})}),(0,t.jsx)(a.td,{children:"Time type"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"IntervalToYearMonth"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.IntervalYearType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"interval_year"})}),(0,t.jsx)(a.td,{children:"Interval type, indicates an interval of year and month"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"IntervalToDayTime"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.IntervalDayType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"interval_day"})}),(0,t.jsx)(a.td,{children:"Interval type, indicates an interval of day and time"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Fixed(length)"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.FixedType.of(length)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"fixed(l)"})}),(0,t.jsx)(a.td,{children:"Fixed type, indicates a fixed-length binary array"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Binary"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.BinaryType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"binary"})}),(0,t.jsx)(a.td,{children:"Binary type, indicates a arbitrary-length binary array"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"List"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.ListType.of(elementType, elementNullable)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"type": "list", "containsNull": JSON Boolean, "elementType": type JSON}'})}),(0,t.jsx)(a.td,{children:"List type, indicate a list of elements with the same type"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Map"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.MapType.of(keyType, valueType)"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"type": "map", "keyType": type JSON, "valueType": type JSON, "valueContainsNull": JSON Boolean}'})}),(0,t.jsx)(a.td,{children:"Map type, indicate a map of key-value pairs"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Struct"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.StructType.of([Types.StructType.Field.of(name, type, nullable)])"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"type": "struct", "fields": [JSON StructField, {"name": string, "type": type JSON, "nullable": JSON Boolean, "comment": string}]}'})}),(0,t.jsx)(a.td,{children:"Struct type, indicate a struct of fields"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Union"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.UnionType.of([type1, type2, ...])"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"type": "union", "types": [type JSON, ...]}'})}),(0,t.jsx)(a.td,{children:"Union type, indicates a union of types"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"UUID"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Types.UUIDType.get()"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"uuid"})}),(0,t.jsx)(a.td,{children:"UUID type, indicates a universally unique identifier"})]})]})]}),"\n",(0,t.jsxs)(a.p,{children:["The related java doc is ",(0,t.jsx)(a.a,{href:"pathname:///docs/0.7.0-incubating/api/java/org/apache/gravitino/rel/types/Type.html",children:"here"}),"."]}),"\n",(0,t.jsx)(a.h5,{id:"external-type",children:"External type"}),"\n",(0,t.jsx)(a.p,{children:"External type is a special type of column type, when you need to use a data type that is not in the Gravitino type\nsystem, and you explicitly know its string representation in an external catalog (usually used in JDBC catalogs), then\nyou can use the ExternalType to represent the type. Similarly, if the original type is unsolvable, it will be\nrepresented by ExternalType.\nThe following shows the data structure of an external type in JSON and Java, enabling easy retrieval of its string value."}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"Json",label:"Json",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-json",children:'{\n  "type": "external",\n  "catalogString": "user-defined"\n}\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// The result of the following type is a string "user-defined"\nString typeString = ((ExternalType) type).catalogString();\n'})})})]}),"\n",(0,t.jsx)(a.h5,{id:"unparsed-type",children:"Unparsed type"}),"\n",(0,t.jsx)(a.p,{children:"Unparsed type is a special type of column type, it used to address compatibility issues in type serialization and\ndeserialization between the server and client. For instance, if a new column type is introduced on the Gravitino server\nthat the client does not recognize, it will be treated as an unparsed type on the client side.\nThe following shows the data structure of an unparsed type in JSON and Java, enabling easy retrieval of its value."}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"Json",label:"Json",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-json",children:'{\n  "type": "unparsed",\n  "unparsedType": "unknown-type"\n}\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// The result of the following type is a string "unknown-type"\nString unparsedValue = ((UnparsedType) type).unparsedType();\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"table-column-default-value",children:"Table column default value"}),"\n",(0,t.jsxs)(a.p,{children:["When defining a table column, you can specify a ",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/expression#literal",children:"literal"})," or an ",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/expression",children:"expression"})," as the default value. The default value typically applies to new rows that are inserted into the table by the underlying catalog."]}),"\n",(0,t.jsx)(a.p,{children:"The following is a table of the column default value that Gravitino supports for different catalogs:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Catalog provider"}),(0,t.jsx)(a.th,{children:"Supported default value"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"hive"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-paimon"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-hudi"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-mysql"})}),(0,t.jsx)(a.td,{children:"\u2714"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,t.jsx)(a.td,{children:"\u2714"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-doris"})}),(0,t.jsx)(a.td,{children:"\u2714"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-oceanbase"})}),(0,t.jsx)(a.td,{children:"\u2714"})]})]})]}),"\n",(0,t.jsx)(a.h4,{id:"table-column-auto-increment",children:"Table column auto-increment"}),"\n",(0,t.jsx)(a.p,{children:"Auto-increment provides a convenient way to ensure that each row in a table has a unique identifier without the need for manually managing identifier allocation.\nThe following table shows the column auto-increment that Gravitino supports for different catalogs:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Catalog provider"}),(0,t.jsx)(a.th,{children:"Supported auto-increment"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"hive"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-paimon"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-hudi"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-mysql"})}),(0,t.jsxs)(a.td,{children:["\u2714(",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog#table-column-auto-increment",children:"limitations"}),")"]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,t.jsx)(a.td,{children:"\u2714"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-doris"})}),(0,t.jsx)(a.td,{children:"\u2718"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-oceanbase"})}),(0,t.jsxs)(a.td,{children:["\u2714(",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog#table-column-auto-increment",children:"limitations"}),")"]})]})]})]}),"\n",(0,t.jsx)(a.h4,{id:"table-property-and-type-mapping",children:"Table property and type mapping"}),"\n",(0,t.jsx)(a.p,{children:"The following is the table property that Gravitino supports:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Catalog provider"}),(0,t.jsx)(a.th,{children:"Table property"}),(0,t.jsx)(a.th,{children:"Type mapping"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"hive"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/apache-hive-catalog#table-properties",children:"Hive table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/apache-hive-catalog#table-column-types",children:"Hive type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-iceberg-catalog#table-properties",children:"Iceberg table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-iceberg-catalog#table-column-types",children:"Iceberg type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-paimon"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-paimon-catalog#table-properties",children:"Paimon table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-paimon-catalog#table-column-types",children:"Paimon type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lakehouse-hudi"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-hudi-catalog#table-properties",children:"Hudi table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/lakehouse-hudi-catalog#table-column-types",children:"Hudi type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-mysql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog#table-properties",children:"MySQL table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-mysql-catalog#table-column-types",children:"MySQL type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-postgresql-catalog#table-properties",children:"PostgreSQL table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-postgresql-catalog#table-column-types",children:"PostgreSQL type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-doris"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-doris-catalog#table-properties",children:"Doris table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-doris-catalog#table-column-types",children:"Doris type mapping"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"jdbc-oceanbase"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog#table-properties",children:"OceanBase table property"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/jdbc-oceanbase-catalog#table-column-types",children:"OceanBase type mapping"})})]})]})]}),"\n",(0,t.jsx)(a.h4,{id:"table-partitioning-distribution-sort-ordering-and-indexes",children:"Table partitioning, distribution, sort ordering and indexes"}),"\n",(0,t.jsx)(a.p,{children:"In addition to the basic settings, Gravitino supports the following features:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Feature"}),(0,t.jsx)(a.th,{children:"Description"}),(0,t.jsx)(a.th,{children:"Java doc"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Table partitioning"}),(0,t.jsxs)(a.td,{children:["Equal to ",(0,t.jsx)(a.code,{children:"PARTITION BY"})," in Apache Hive, It is a partitioning strategy that is used to split a table into parts based on partition keys. Some table engine may not support this feature"]}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"pathname:///docs/0.8.0-incubating-SNAPSHOT/api/java/org/apache/gravitino/dto/rel/partitioning/Partitioning.html",children:"Partition"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Table distribution"}),(0,t.jsxs)(a.td,{children:["Equal to ",(0,t.jsx)(a.code,{children:"CLUSTERED BY"})," in Apache Hive, distribution a.k.a (Clustering) is a technique to split the data into more manageable files/parts, (By specifying the number of buckets to create). The value of the distribution column will be hashed by a user-defined number into buckets."]}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"pathname:///docs/0.8.0-incubating-SNAPSHOT/api/java/org/apache/gravitino/rel/expressions/distributions/Distribution.html",children:"Distribution"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Table sort ordering"}),(0,t.jsxs)(a.td,{children:["Equal to ",(0,t.jsx)(a.code,{children:"SORTED BY"})," in Apache Hive, sort ordering is a method to sort the data in specific ways such as by a column or a function, and then store table data. it will highly improve the query performance under certain scenarios."]}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"pathname:///docs/0.8.0-incubating-SNAPSHOT/api/java/org/apache/gravitino/rel/expressions/sorts/SortOrder.html",children:"SortOrder"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Table indexes"}),(0,t.jsxs)(a.td,{children:["Equal to ",(0,t.jsx)(a.code,{children:"KEY/INDEX"})," in MySQL , unique key enforces uniqueness of values in one or more columns within a table. It ensures that no two rows have identical values in specified columns, thereby facilitating data integrity and enabling efficient data retrieval and manipulation operations."]}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.a,{href:"pathname:///docs/0.8.0-incubating-SNAPSHOT/api/java/org/apache/gravitino/rel/indexes/Index.html",children:"Index"})})]})]})]}),"\n",(0,t.jsxs)(a.p,{children:["For more information, please see the related document on ",(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/table-partitioning-bucketing-sort-order-indexes",children:"partitioning, bucketing, sorting, and indexes"}),"."]}),"\n",(0,t.jsx)(a.admonition,{type:"note",children:(0,t.jsx)(a.p,{children:"The code above is an example of creating a Hive table. For other catalogs, the code is similar, but the supported column type, and table properties may be different. For more details, please refer to the related doc."})}),"\n",(0,t.jsx)(a.h3,{id:"load-a-table",children:"Load a table"}),"\n",(0,t.jsxs)(a.p,{children:["You can load a table by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a table:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json"  \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\ntableCatalog.loadTable(NameIdentifier.of("schema", "table"));\n// ...\n'})})})]}),"\n",(0,t.jsx)(a.admonition,{type:"note",children:(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["When Gravitino loads a table from a catalog with various data types, if Gravitino is unable to parse the data type, it will use an ",(0,t.jsx)(a.strong,{children:(0,t.jsx)(a.a,{href:"#external-type",children:"External Type"})})," to preserve the original data type, ensuring that the table can be loaded successfully."]}),"\n",(0,t.jsxs)(a.li,{children:["When Gravitino loads a table from a catalog that supports default value, if Gravitino is unable to parse the default value, it will use an ",(0,t.jsx)(a.strong,{children:(0,t.jsx)(a.a,{href:"/docs/0.7.0-incubating/expression#unparsed-expression",children:"Unparsed Expression"})})," to preserve the original default value, ensuring that the table can be loaded successfully."]}),"\n"]})}),"\n",(0,t.jsx)(a.h3,{id:"alter-a-table",children:"Alter a table"}),"\n",(0,t.jsxs)(a.p,{children:["You can modify a table by sending a ",(0,t.jsx)(a.code,{children:"PUT"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of modifying a table:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "removeProperty",\n      "property": "key2"\n    }, {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n  ]  \n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\n\nTable t = tableCatalog.alterTable(NameIdentifier.of("schema", "table"),\n    TableChange.rename("table_renamed"), TableChange.updateComment("xxx"));\n// ...\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a table:"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Supported modification"}),(0,t.jsx)(a.th,{children:"JSON"}),(0,t.jsx)(a.th,{children:"Java"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Rename table"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"rename","newName":"table_renamed"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'TableChange.rename("table_renamed")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update comment"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'TableChange.updateComment("new_comment")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Set a table property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'TableChange.setProperty("key1", "value1")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Remove a table property"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'TableChange.removeProperty("key1")'})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Add a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"addColumn","fieldName":["position"],"type":"varchar(20)","comment":"Position of user","position":"FIRST","nullable": true, "autoIncrement": false, "defaultValue" : {"type": "literal", "dataType": "varchar(20)", "value": "Default Position"}}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.addColumn(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Delete a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"deleteColumn","fieldName": ["name"], "ifExists": true}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.deleteColumn(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Rename a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"renameColumn","oldFieldName":["name_old"], "newFieldName":"name_new"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.renameColumn(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update the column comment"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateColumnComment", "fieldName": ["name"], "newComment": "new comment"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.updateColumnCommment(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update the type of a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateColumnType","fieldName": ["name"], "newType":"varchar(100)"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.updateColumnType(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update the nullability of a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateColumnNullability","fieldName": ["name"],"nullable":true}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.updateColumnNullability(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update the position of a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateColumnPosition","fieldName": ["name"], "newPosition":"default"}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.updateColumnPosition(...)"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Update the default value of a column"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:'{"@type":"updateColumnDefaultValue","fieldName": ["name"], "newDefaultValue":{"type":"literal","dataType":"varchar(100)","value":"new default value}}'})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"TableChange.updateColumnDefaultValue(...)"})})]})]})]}),"\n",(0,t.jsx)(a.h3,{id:"drop-a-table",children:"Drop a table"}),"\n",(0,t.jsxs)(a.p,{children:["You can remove a table by sending a ",(0,t.jsx)(a.code,{children:"DELETE"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a table:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'## Purge can be true or false, if purge is true, Gravitino will remove the data from the table.\n\ncurl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table?purge=true\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\n\n// Drop a table\ntableCatalog.dropTable(NameIdentifier.of("schema", "table"));\n\n// Purge a table\ntableCatalog.purgeTable(NameIdentifier.of("schema", "table"));\n// ...\n'})})})]}),"\n",(0,t.jsxs)(a.p,{children:["There are two ways to remove a table: ",(0,t.jsx)(a.code,{children:"dropTable"})," and ",(0,t.jsx)(a.code,{children:"purgeTable"}),":"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"dropTable"}),"  removes both the metadata and the directory associated with the table from the file system if the table is not an external table. In case of an external table, only the associated metadata is removed."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"purgeTable"})," completely removes both the metadata and the directory associated with the table and skipping trash, if the table is an external table or the catalogs don't support purge table, ",(0,t.jsx)(a.code,{children:"UnsupportedOperationException"})," is thrown."]}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["Hive catalog and lakehouse-iceberg catalog supports ",(0,t.jsx)(a.code,{children:"purgeTable"})," while jdbc-mysql, jdbc-postgresql and lakehouse-paimon catalog doesn't support."]}),"\n",(0,t.jsx)(a.h3,{id:"list-all-tables-under-a-schema",children:"List all tables under a schema"}),"\n",(0,t.jsxs)(a.p,{children:["You can list all tables in a schema by sending a ",(0,t.jsx)(a.code,{children:"GET"})," request to the ",(0,t.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables"})," endpoint or just use the Gravitino Java client. The following is an example of listing all the tables in a schema:"]}),"\n",(0,t.jsxs)(i.A,{groupId:"language",queryString:!0,children:[(0,t.jsx)(s.default,{value:"shell",label:"Shell",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables\n'})})}),(0,t.jsx)(s.default,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoClient.loadCatalog("hive_catalog");\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\nNameIdentifier[] identifiers =\n    tableCatalog.listTables(Namespace.of("schema"));\n// ...\n'})})})]})]})}function u(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},54385:(e,a,n)=>{n.d(a,{A:()=>u});var t=n(79474),l=n(13526),i=n(38822),s=n(57301),r=n(30391);const c={tabList:"tabList_sUp1",tabItem:"tabItem_vHY0"};var o=n(13274);function d({className:e,block:a,selectedValue:n,selectValue:t,tabValues:s}){const r=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),h=e=>{const a=e.currentTarget,l=r.indexOf(a),i=s[l].value;i!==n&&(d(a),t(i))},p=e=>{let a=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=r.indexOf(e.currentTarget)+1;a=r[n]??r[0];break}case"ArrowLeft":{const n=r.indexOf(e.currentTarget)-1;a=r[n]??r[r.length-1];break}}a?.focus()};return(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},e),children:s.map(({value:e,label:a,attributes:t})=>(0,o.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>r.push(e),onKeyDown:p,onClick:h,...t,className:(0,l.A)("tabs__item",c.tabItem,t?.className,{"tabs__item--active":n===e}),children:a??e},e))})}function h({lazy:e,children:a,selectedValue:n}){const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===n);return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,o.jsx)("div",{className:"margin-top--md",children:l.map((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==n}))})}function p(e){const a=(0,s.u)(e);return(0,o.jsxs)("div",{className:(0,l.A)("tabs-container",c.tabList),children:[(0,o.jsx)(d,{...a,...e}),(0,o.jsx)(h,{...a,...e})]})}function u(e){const a=(0,r.default)();return(0,o.jsx)(p,{...e,children:(0,s.v)(e.children)},String(a))}},57301:(e,a,n)=>{n.d(a,{u:()=>u,v:()=>o});var t=n(79474),l=n(20241),i=n(95573),s=n(7419),r=n(25789),c=n(77784);function o(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:a,children:n}=e;return(0,t.useMemo)(()=>{const e=a??function(e){return o(e).map(({props:{value:e,label:a,attributes:n,default:t}})=>({value:e,label:a,attributes:n,default:t}))}(n);return function(e){const a=(0,c.X)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,n])}function h({value:e,tabValues:a}){return a.some(a=>a.value===e)}function p({queryString:e=!1,groupId:a}){const n=(0,l.W6)(),i=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,s.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const a=new URLSearchParams(n.location.search);a.set(i,e),n.replace({...n.location,search:a.toString()})},[i,n])]}function u(e){const{defaultValue:a,queryString:n=!1,groupId:l}=e,s=d(e),[c,o]=(0,t.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find(e=>e.default)??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:s})),[u,g]=p({queryString:n,groupId:l}),[j,m]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,l]=(0,r.Dv)(a);return[n,(0,t.useCallback)(e=>{a&&l.set(e)},[a,l])]}({groupId:l}),x=(()=>{const e=u??j;return h({value:e,tabValues:s})?e:null})();(0,i.A)(()=>{x&&o(x)},[x]);return{selectedValue:c,selectValue:(0,t.useCallback)(e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),g(e),m(e)},[g,m,s]),tabValues:s}}},77167:(e,a,n)=>{n.r(a),n.d(a,{default:()=>s});n(79474);var t=n(13526);const l={tabItem:"tabItem_sS8v"};var i=n(13274);function s({children:e,hidden:a,className:n}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(l.tabItem,n),hidden:a,children:e})}}}]);