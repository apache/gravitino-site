"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[5997],{7466:(e,a,i)=>{i.d(a,{A:()=>m});var n=i(79474),t=i(13526),l=i(99576),c=i(87855),o=i(14025);const s={tabList:"tabList_fOL3",tabItem:"tabItem_OgCG"};var d=i(13274);function r({className:e,block:a,selectedValue:i,selectValue:n,tabValues:c}){const o=[],{blockElementScrollPositionUntilNextRender:r}=(0,l.a_)(),p=e=>{const a=e.currentTarget,t=o.indexOf(a),l=c[t].value;l!==i&&(r(a),n(l))},h=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const i=o.indexOf(e.currentTarget)+1;a=o[i]??o[0];break}case"ArrowLeft":{const i=o.indexOf(e.currentTarget)-1;a=o[i]??o[o.length-1];break}}a?.focus()};return(0,d.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":a},e),children:c.map(({value:e,label:a,attributes:n})=>(0,d.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>o.push(e),onKeyDown:h,onClick:p,...n,className:(0,t.A)("tabs__item",s.tabItem,n?.className,{"tabs__item--active":i===e}),children:a??e},e))})}function p({lazy:e,children:a,selectedValue:i}){const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===i);return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,d.jsx)("div",{className:"margin-top--md",children:t.map((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==i}))})}function h(e){const a=(0,c.u)(e);return(0,d.jsxs)("div",{className:(0,t.A)("tabs-container",s.tabList),children:[(0,d.jsx)(r,{...a,...e}),(0,d.jsx)(p,{...a,...e})]})}function m(e){const a=(0,o.default)();return(0,d.jsx)(h,{...e,children:(0,c.v)(e.children)},String(a))}},47048:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var n=i(13274),t=i(21943),l=i(7466),c=i(34038);const o={title:"Manage policies in Gravitino",slug:"/manage-policies-in-gravitino",date:new Date("2025-08-04T00:00:00.000Z"),keyword:"policy management, policy, policies, Gravitino, data governance",license:"This software is licensed under the Apache License version 2."},s=void 0,d={id:"manage-policies-in-gravitino",title:"Manage policies in Gravitino",description:"Introduction",source:"@site/versioned_docs/version-1.0.0/manage-policies-in-gravitino.md",sourceDirName:".",slug:"/manage-policies-in-gravitino",permalink:"/docs/1.0.0/manage-policies-in-gravitino",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/gravitino-site/tree/main/docs/manage-policies-in-gravitino.md",tags:[],version:"1.0.0",frontMatter:{title:"Manage policies in Gravitino",slug:"/manage-policies-in-gravitino",date:"2025-08-04T00:00:00.000Z",keyword:"policy management, policy, policies, Gravitino, data governance",license:"This software is licensed under the Apache License version 2."},sidebar:"docs",previous:{title:"Manage jobs in Gravitino",permalink:"/docs/1.0.0/manage-jobs-in-gravitino"},next:{title:"Manage statistics in Gravitino",permalink:"/docs/1.0.0/manage-statistics-in-gravitino"}},r={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Policy operations",id:"policy-operations",level:2},{value:"Create new policies",id:"create-new-policies",level:3},{value:"List created policies",id:"list-created-policies",level:3},{value:"Get a policy by name",id:"get-a-policy-by-name",level:3},{value:"Update a policy",id:"update-a-policy",level:3},{value:"Enable or disable a policy",id:"enable-or-disable-a-policy",level:3},{value:"Delete a policy",id:"delete-a-policy",level:3},{value:"Policy associations",id:"policy-associations",level:2},{value:"Associate and disassociate policies with a metadata object",id:"associate-and-disassociate-policies-with-a-metadata-object",level:3},{value:"List associated policies for a metadata object",id:"list-associated-policies-for-a-metadata-object",level:3},{value:"Get an associated policy by name for a metadata object",id:"get-an-associated-policy-by-name-for-a-metadata-object",level:3},{value:"List metadata objects associated with a policy",id:"list-metadata-objects-associated-with-a-policy",level:3}];function h(e){const a={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(a.p,{children:"Starting from 1.0.0, Gravitino introduces a new policy system that allows you to manage policies for\nmetadata objects. Policies are a set of rules that can be associated with a metadata\nobject for data governance and similar purposes."}),"\n",(0,n.jsx)(a.p,{children:"This document provides a brief introduction to using policies in Gravitino, covering both the Gravitino Java client and\nREST APIs. If you want to know more about the policy system in Gravitino, please refer to the\nJavadoc and REST API documentation."}),"\n",(0,n.jsx)(a.admonition,{type:"info",children:(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:["Metadata objects are objects that are managed in Gravitino, such as ",(0,n.jsx)(a.code,{children:"CATALOG"}),", ",(0,n.jsx)(a.code,{children:"SCHEMA"}),", ",(0,n.jsx)(a.code,{children:"TABLE"}),",\n",(0,n.jsx)(a.code,{children:"FILESET"}),", ",(0,n.jsx)(a.code,{children:"TOPIC"}),", and ",(0,n.jsx)(a.code,{children:"MODEL"}),". A metadata object is combined by a ",(0,n.jsx)(a.code,{children:"type"})," and a dot-separated\n",(0,n.jsx)(a.code,{children:"name"}),". For example, a ",(0,n.jsx)(a.code,{children:"CATALOG"}),' object has a name "catalog1" with type "CATALOG", a ',(0,n.jsx)(a.code,{children:"SCHEMA"}),'\nobject has a name "catalog1.schema1" with type "SCHEMA", a ',(0,n.jsx)(a.code,{children:"TABLE"}),' object has a name\n"catalog1.schema1.table1" with type "TABLE".']}),"\n",(0,n.jsxs)(a.li,{children:["Currently, ",(0,n.jsx)(a.code,{children:"CATALOG"}),", ",(0,n.jsx)(a.code,{children:"SCHEMA"}),", ",(0,n.jsx)(a.code,{children:"TABLE"}),", ",(0,n.jsx)(a.code,{children:"FILESET"}),", ",(0,n.jsx)(a.code,{children:"TOPIC"}),", and ",(0,n.jsx)(a.code,{children:"MODEL"})," objects can be\nassociated with policies."]}),"\n",(0,n.jsxs)(a.li,{children:["Policies in Gravitino are inheritable, so listing policies of a metadata object will also list the\npolicies of its parent metadata objects. For example, listing policies of a ",(0,n.jsx)(a.code,{children:"Table"})," will also list\nthe policies of its parent ",(0,n.jsx)(a.code,{children:"Schema"})," and ",(0,n.jsx)(a.code,{children:"Catalog"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:["The same policy can be associated with both parent and child metadata objects. But when you list the\nassociated policies of a child metadata object, this policy will be included only once in the result\nlist with ",(0,n.jsx)(a.code,{children:"inherited"})," value ",(0,n.jsx)(a.code,{children:"false"}),"."]}),"\n"]})}),"\n",(0,n.jsx)(a.h2,{id:"policy-operations",children:"Policy operations"}),"\n",(0,n.jsx)(a.h3,{id:"create-new-policies",children:"Create new policies"}),"\n",(0,n.jsx)(a.p,{children:"The first step to managing policies is to create new policies. You can create a new policy by providing a policy\nname, type, and other optional fields like comment, enabled, etc."}),"\n",(0,n.jsxs)(a.p,{children:["Gravitino supports two kinds of policies: built-in policies and custom policies.\nFor built-in policies, the ",(0,n.jsx)(a.code,{children:"policyType"})," starts with ",(0,n.jsx)(a.code,{children:"system."})," and the ",(0,n.jsx)(a.code,{children:"supportedObjectTypes"})," in the policy content is predefined.\nFor custom policies, the ",(0,n.jsx)(a.code,{children:"policyType"})," must be ",(0,n.jsx)(a.code,{children:"custom"})," and the ",(0,n.jsx)(a.code,{children:"supportedObjectTypes"})," can be any combination of metadata object types."]}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:["The field ",(0,n.jsx)(a.code,{children:"supportedObjectTypes"})," in the content is immutable after the policy is created."]}),"\n"]})}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'# Create a custom policy\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "my_policy1",\n  "comment": "This is a test policy",\n  "policyType": "custom",\n  "enabled": true,\n  "content": {\n    "customRules": {\n      "rule1": 123\n    },\n    "supportedObjectTypes": [\n      "CATALOG",\n      "SCHEMA",\n      "TABLE",\n      "FILESET",\n      "TOPIC",\n      "MODEL"\n    ],\n    "properties": {\n      "key1": "value1"\n    }\n  }\n}\' http://localhost:8090/api/metalakes/test/policies\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient client = ...\n\n// Create a custom policy\nPolicyContent content = PolicyContents.custom(\n    ImmutableMap.of("rule1", 123),\n    ImmutableSet.of(\n        MetadataObject.Type.CATALOG,\n        MetadataObject.Type.TABLE),\n    ImmutableMap.of("key1", "value1"));\nPolicy policy = client.createPolicy(\n    "my_policy1",\n    "custom",\n    "This is a test policy",\n    true /* enabled */,\n    content);\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"list-created-policies",children:"List created policies"}),"\n",(0,n.jsx)(a.p,{children:"You can list all the created policy names as well as policy objects in a metalake in Gravitino."}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'# List policy names\ncurl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/policies\n\n# List policy details\ncurl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/policies?details=true\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"GravitinoClient client = ...\nString[] policyNames = client.listPolicies();\n\nPolicy[] policies = client.listPolicyInfos();\n"})})})]}),"\n",(0,n.jsx)(a.h3,{id:"get-a-policy-by-name",children:"Get a policy by name"}),"\n",(0,n.jsx)(a.p,{children:"You can get a policy by its name."}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/policies/my_policy1\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient client = ...\nPolicy policy = client.getPolicy("my_policy1");\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"update-a-policy",children:"Update a policy"}),"\n",(0,n.jsx)(a.p,{children:"Gravitino allows you to update a policy by providing changes."}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "rename",\n      "newName": "my_policy_new"\n    },\n    {\n      "@type": "updateComment",\n      "newComment": "This is my new policy comment"\n    },\n    {\n      "@type": "updateContent",\n      "policyType": "custom",\n      "newContent": {\n        "customRules": {\n          "rule1": 456\n        },\n        "supportedObjectTypes": [\n          "CATALOG",\n          "TABLE"\n        ],\n        "properties": {\n          "key1": "new_value1",\n          "key2": "new_value2"\n        }\n      }\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/test/policies/my_policy1\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient client = ...\nPolicyContent newContent = PolicyContents.custom(\n    ImmutableMap.of("rule1", 456),\n    ImmutableSet.of(\n        MetadataObject.Type.CATALOG,\n        MetadataObject.Type.TABLE),\n    ImmutableMap.of("key1", "new_value1", "key2", "new_value2"));\n\nPolicy policy = client.alterPolicy(\n    "my_policy1",\n    PolicyChange.rename("my_policy_new"),\n    PolicyChange.updateComment("This is my new policy comment"),\n    PolicyChange.updateContent("custom", newContent));\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following policy changes:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Supported modification"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Java"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Rename a policy"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"rename","newName":"policy_renamed"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'PolicyChange.rename("policy_renamed")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update a comment"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'PolicyChange.updateComment("new_comment")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update policy content"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateContent","policyType":"custom","newContent":{...}}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'PolicyChange.updateContent("test_type", newContent)'})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"enable-or-disable-a-policy",children:"Enable or disable a policy"}),"\n",(0,n.jsx)(a.p,{children:"You can enable or disable a policy."}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"enabled"})," field of a policy is only a display attribute that marks whether the policy is enabled or disabled.\nIt does not affect the actual behavior or characteristics of the policy itself. This field is intended for\nexternal presentation and does not control policy application logic in Gravitino."]}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"enabled"})," field can be used for various purposes, such as:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"You may want to temporarily disable a policy for auditing or review purposes, without deleting it or changing its content."}),"\n",(0,n.jsx)(a.li,{children:"Enabling a policy can be used to indicate that it is ready for use or has passed necessary approvals."}),"\n",(0,n.jsxs)(a.li,{children:["The ",(0,n.jsx)(a.code,{children:"enabled"})," status can be used in UI filtering or reporting to distinguish between active and inactive policies."]}),"\n",(0,n.jsx)(a.li,{children:"An external policy enforcement system can use this field to determine whether to execute the corresponding policy."}),"\n"]}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'# Disable a policy\ncurl -X PATCH -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "enable": false\n}\' http://localhost:8090/api/metalakes/test/policies/my_policy_new\n\n# Enable a policy\ncurl -X PATCH -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "enable": true\n}\' http://localhost:8090/api/metalakes/test/policies/my_policy_new\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient client = ...\n// Disable a policy\nclient.disablePolicy("my_policy_new");\n\n// Enable a policy\nclient.enablePolicy("my_policy_new");\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"delete-a-policy",children:"Delete a policy"}),"\n",(0,n.jsx)(a.p,{children:"You can delete a policy by its name."}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'curl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/policies/my_policy_new\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient client = ...\nclient.deletePolicy("my_policy_new");\n'})})})]}),"\n",(0,n.jsx)(a.h2,{id:"policy-associations",children:"Policy associations"}),"\n",(0,n.jsxs)(a.p,{children:["Gravitino allows you to associate and disassociate policies with metadata objects. Currently,\n",(0,n.jsx)(a.code,{children:"CATALOG"}),", ",(0,n.jsx)(a.code,{children:"SCHEMA"}),", ",(0,n.jsx)(a.code,{children:"TABLE"}),", ",(0,n.jsx)(a.code,{children:"FILESET"}),", ",(0,n.jsx)(a.code,{children:"TOPIC"}),", and ",(0,n.jsx)(a.code,{children:"MODEL"})," objects can have policies."]}),"\n",(0,n.jsx)(a.h3,{id:"associate-and-disassociate-policies-with-a-metadata-object",children:"Associate and disassociate policies with a metadata object"}),"\n",(0,n.jsx)(a.p,{children:"You can associate and disassociate policies with a metadata object by providing the object type, object\nname and policy names."}),"\n",(0,n.jsxs)(a.p,{children:["The request path for REST API is ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake}/objects/{metadataObjectType}/{metadataObjectFullName}/policies"}),"."]}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'# First, create some policies to associate\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "name": "policy1", \n  "policyType": "custom", \n  "content": {\n    "supportedObjectTypes": ["CATALOG", "TABLE"]\n  }\n}\' http://localhost:8090/api/metalakes/test/policies\n\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "name": "policy2", \n  "policyType": "custom", \n  "content": {\n    "supportedObjectTypes": ["CATALOG", "TABLE"]\n  }\n}\' http://localhost:8090/api/metalakes/test/policies\n\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "name": "policy3", \n  "policyType": "custom", \n  "content": {\n    "supportedObjectTypes": ["CATALOG", "TABLE"]\n  }\n}\' http://localhost:8090/api/metalakes/test/policies\n\n# Associate and disassociate policies with a catalog\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "policiesToAdd": ["policy1", "policy2"],\n  "policiesToRemove": ["policy3"]\n}\' http://localhost:8090/api/metalakes/test/objects/catalog/my_catalog/policies\n\n# Associate policies with a schema\ncurl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "policiesToAdd": ["policy1"]\n}\' http://localhost:8090/api/metalakes/test/objects/schema/my_catalog.my_schema/policies\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// Assume catalog \'my_catalog\' and schema \'my_catalog.my_schema\' exist\nCatalog catalog = client.loadCatalog("my_catalog");\ncatalog.supportsPolicies().associatePolicies(\n    new String[] {"policy1", "policy2"},\n    new String[] {"policy3"});\n\n// You need to load the schema from the catalog\nSchema schema = catalog.asSchemas().loadSchema("my_schema");\nschema.supportsPolicies().associatePolicies(new String[] {"policy1"}, null);\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"list-associated-policies-for-a-metadata-object",children:"List associated policies for a metadata object"}),"\n",(0,n.jsx)(a.p,{children:"You can list all the policies associated with a metadata object. If a policy is inheritable,\nlisting policies of a metadata object will also list the policies of its parent metadata objects."}),"\n",(0,n.jsxs)(a.p,{children:["The request path for REST API is ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake}/objects/{metadataObjectType}/{metadataObjectFullName}/policies"}),"."]}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'# List policy names for a catalog\ncurl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/objects/catalog/my_catalog/policies\n\n# List policy details for a schema\ncurl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/objects/schema/my_catalog.my_schema/policies?details=true\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'Catalog catalog = client.loadCatalog("my_catalog");\nString[] policyNames = catalog.supportsPolicies().listPolicies();\nPolicy[] policies = catalog.supportsPolicies().listPolicyInfos();\n\nSchema schema = catalog.asSchemas().loadSchema("my_schema");\nString[] schemaPolicyNames = schema.supportsPolicies().listPolicies();\nPolicy[] schemaPolicies = schema.supportsPolicies().listPolicyInfos();\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"get-an-associated-policy-by-name-for-a-metadata-object",children:"Get an associated policy by name for a metadata object"}),"\n",(0,n.jsx)(a.p,{children:"You can get an associated policy by its name for a metadata object."}),"\n",(0,n.jsxs)(a.p,{children:["The request path for REST API is ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake}/objects/{metadataObjectType}/{metadataObjectFullName}/policies/{policy}"}),"."]}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/objects/catalog/my_catalog/policies/policy1\n\ncurl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/objects/schema/my_catalog.my_schema/policies/policy1\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'Catalog catalog = client.loadCatalog("my_catalog");\nPolicy policy = catalog.supportsPolicies().getPolicy("policy1");\n\nSchema schema = catalog.asSchemas().loadSchema("my_schema");\nPolicy schemaPolicy = schema.supportsPolicies().getPolicy("policy1");\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"list-metadata-objects-associated-with-a-policy",children:"List metadata objects associated with a policy"}),"\n",(0,n.jsxs)(a.p,{children:["You can list all the metadata objects ",(0,n.jsx)(a.strong,{children:"directly associated with"})," a policy."]}),"\n",(0,n.jsxs)(l.A,{groupId:"language",queryString:!0,children:[(0,n.jsx)(c.default,{value:"shell",label:"Shell",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-shell",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\nhttp://localhost:8090/api/metalakes/test/policies/policy1/objects\n'})})}),(0,n.jsx)(c.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'Policy policy = client.getPolicy("policy1");\nMetadataObject[] objects = policy.associatedObjects().objects();\nint count = policy.associatedObjects().count();\n'})})})]})]})}function m(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);