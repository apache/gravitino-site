"use strict";(self.webpackChunkapache_website_template=self.webpackChunkapache_website_template||[]).push([[56678],{19632:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=n(13274),s=n(21943);const r={title:"Gravitino server Lineage support",slug:"/lineage/gravitino-server-lineage",keyword:"Gravitino OpenLineage",license:"This software is licensed under the Apache License version 2."},a=void 0,l={id:"lineage/gravitino-server-lineage",title:"Gravitino server Lineage support",description:"Overview",source:"@site/docs/lineage/gravitino-server-lineage.md",sourceDirName:"lineage",slug:"/lineage/gravitino-server-lineage",permalink:"/docs/next/lineage/gravitino-server-lineage",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/gravitino-site/tree/main/docs/lineage/gravitino-server-lineage.md",tags:[],version:"current",frontMatter:{title:"Gravitino server Lineage support",slug:"/lineage/gravitino-server-lineage",keyword:"Gravitino OpenLineage",license:"This software is licensed under the Apache License version 2."},sidebar:"docs",previous:{title:"Gravitino Spark Lineage support",permalink:"/docs/next/lineage/gravitino-spark-lineage"},next:{title:"Overview",permalink:"/docs/next/security/security"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Lineage Configuration",id:"lineage-configuration",level:2},{value:"Lineage http source",id:"lineage-http-source",level:2},{value:"Lineage log sink",id:"lineage-log-sink",level:2},{value:"Lineage HTTP sink",id:"lineage-http-sink",level:2},{value:"High watermark status",id:"high-watermark-status",level:2}];function o(e){const i={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(i.p,{children:"Gravitino server provides a pluggable lineage framework to receive, process, and sink OpenLineage events. By leveraging this, you could do custom process for the lineage event and sink to your dedicated systems."}),"\n",(0,t.jsx)(i.h2,{id:"lineage-configuration",children:"Lineage Configuration"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Configuration item"}),(0,t.jsx)(i.th,{children:"Description"}),(0,t.jsx)(i.th,{children:"Default value"}),(0,t.jsx)(i.th,{children:"Required"}),(0,t.jsx)(i.th,{children:"Since Version"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.source"})}),(0,t.jsx)(i.td,{children:"The name of lineage event source."}),(0,t.jsx)(i.td,{children:"http"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.${sourceName}.sourceClass"})}),(0,t.jsxs)(i.td,{children:["The name of the lineage source class which should implement ",(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.source.LineageSource"})," interface."]}),(0,t.jsx)(i.td,{children:"(none)"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.processorClass"})}),(0,t.jsxs)(i.td,{children:["The name of the lineage processor class which should implement ",(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.processor.LineageProcessor"})," interface. The default noop processor do nothing about the run event."]}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.processor.NoopProcessor"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.sinks"})}),(0,t.jsx)(i.td,{children:"The Lineage event sink names (support multiple sinks separated by commas)."}),(0,t.jsx)(i.td,{children:"log"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.${sinkName}.sinkClass"})}),(0,t.jsxs)(i.td,{children:["The name of the lineage sink class which should implement ",(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.sink.LineageSink"})," interface."]}),(0,t.jsx)(i.td,{children:"(none)"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"gravitino.lineage.queueCapacity"})}),(0,t.jsxs)(i.td,{children:["The total capacity of lineage event queues. When there are multiple lineage sinks, each sink utilizes an isolated event queue. The capacity of each queue is calculated by dividing the value of ",(0,t.jsx)(i.code,{children:"gravitino.lineage.queueCapacity"})," by the number of sinks."]}),(0,t.jsx)(i.td,{children:"10000"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"0.9.0-incubating"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"lineage-http-source",children:"Lineage http source"}),"\n",(0,t.jsxs)(i.p,{children:["Http source provides an endpoint which follows ",(0,t.jsx)(i.a,{href:"https://openlineage.io/apidocs/openapi/",children:"OpenLineage API spec"})," to receive OpenLineage run event. The following use example:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-shell",children:'cat <<EOF >source.json\n{\n  "eventType": "START",\n  "eventTime": "2023-10-28T19:52:00.001+10:00",\n  "run": {\n    "runId": "0176a8c2-fe01-7439-87e6-56a1a1b4029f"\n  },\n  "job": {\n    "namespace": "gravitino-namespace",\n    "name": "gravitino-job1"\n  },\n  "inputs": [{\n    "namespace": "gravitino-namespace",\n    "name": "gravitino-table-identifier"\n  }],\n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client",\n  "schemaURL": "https://openlineage.io/spec/1-0-5/OpenLineage.json#/definitions/RunEvent"\n}\nEOF\n\ncurl -X POST \\\n  -i -H \'Content-Type: application/json\' \\\n  -d \'@source.json\' \\\n  http://localhost:8090/api/lineage\n'})}),"\n",(0,t.jsx)(i.h2,{id:"lineage-log-sink",children:"Lineage log sink"}),"\n",(0,t.jsxs)(i.p,{children:["Log sink prints the log in a separate log file ",(0,t.jsx)(i.code,{children:"gravitino_lineage.log"}),", you could change the default behavior in ",(0,t.jsx)(i.code,{children:"conf/log4j2.properties"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"lineage-http-sink",children:"Lineage HTTP sink"}),"\n",(0,t.jsx)(i.p,{children:"The HTTP sink supports sending the lineage event to an HTTP server that follows the OpenLineage REST specification, like marquez"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Property Name"}),(0,t.jsx)(i.th,{children:"Description"}),(0,t.jsx)(i.th,{children:"Default Value"}),(0,t.jsx)(i.th,{children:"Required"}),(0,t.jsx)(i.th,{children:"Since Version"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"gravitino.lineage.sinks"}),(0,t.jsxs)(i.td,{children:["Specifies the lineage sink implementation to use. For http sink ",(0,t.jsx)(i.code,{children:"http"}),"."]}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"log"})}),(0,t.jsx)(i.td,{children:"Yes"}),(0,t.jsx)(i.td,{children:"0.9.0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"gravitino.lineage.http.sinkClass"}),(0,t.jsxs)(i.td,{children:["Fully qualified class name of the http sink lineage sink implementation  ",(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.sink.LineageHttpSink"}),")"]}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"org.apache.gravitino.lineage.sink.LineageLogSink"})}),(0,t.jsx)(i.td,{children:"Yes"}),(0,t.jsx)(i.td,{children:"0.9.0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"gravitino.lineage.http.url"}),(0,t.jsxs)(i.td,{children:["URL of the http sink server endpoint for lineage collection(e.g., ",(0,t.jsx)(i.code,{children:"http://localhost:5000"}),")"]}),(0,t.jsx)(i.td,{children:"none"}),(0,t.jsx)(i.td,{children:"Yes"}),(0,t.jsx)(i.td,{children:"1.0.0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"gravitino.lineage.http.authType"}),(0,t.jsxs)(i.td,{children:["Authentication type for http sink (options: ",(0,t.jsx)(i.code,{children:"apiKey"})," or ",(0,t.jsx)(i.code,{children:"none"}),")"]}),(0,t.jsx)(i.td,{children:"none"}),(0,t.jsx)(i.td,{children:"Yes"}),(0,t.jsx)(i.td,{children:"1.0.0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"gravitino.lineage.http.apiKey"}),(0,t.jsxs)(i.td,{children:["API key for authenticating with http sink (required if authType=",(0,t.jsx)(i.code,{children:"apiKey"}),")"]}),(0,t.jsx)(i.td,{children:"none"}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"1.0.0"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"high-watermark-status",children:"High watermark status"}),"\n",(0,t.jsxs)(i.p,{children:["When the lineage sink operates slowly, lineage events accumulate in the async queue. Once the queue size exceeds 90% of its capacity (high watermark threshold), the lineage system enters a high watermark status. In this state, the lineage source must implement retry and logging mechanisms for rejected events to prevent system overload. For the HTTP source, it returns the ",(0,t.jsx)(i.code,{children:"429 Too Many Requests"})," status code to the client."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);